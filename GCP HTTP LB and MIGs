#Reproductions steps in summary:

#Step 1: Firewall rules to allow HTTP and health check/load balancers access to your managed instance group
#Step 2: A health check for our instances
#Step 3: Two instance templates that will be used to deploy a "version 1" and "version 2" of our application
#Step 4: A single instance group, initially locked to five machines (autoscaling off) for this lesson. We will change this later.
#Step 5: Creating the HTTP LB and testing it.

#Reproduction commands:
#Step 1 and 2 - Create firewall rules allowing http and load balancer/health check access:

gcloud compute firewall-rules create http-allow --direction=INGRESS --priority=1000 --network=default --action=ALLOW --rules=tcp:80 --source-ranges=0.0.0.0/0 --target-tags=http-server
gcloud compute firewall-rules create health-check-allow --direction=INGRESS --priority=1000 --network=default --action=ALLOW --rules=tcp --source-ranges=[IP_Address(es)] --target-tags=http-server

#Step 3 - Create version 1 template:

gcloud compute instance-templates create template-v1 --machine-type=f1-micro --metadata=startup-script-url=[bucket_url_(.sh)] --tags=http-server --boot-disk-device-name=template-v1

#Step 3 - Create version 2 template:

gcloud compute instance-templates create template-v2 --machine-type=f1-micro --metadata=startup-script-url=[bucket_url_(.sh)] --tags=http-server --boot-disk-device-name=template-v2

#Step 4 - Create health check and single instance group from version 1 template:

gcloud compute health-checks create tcp "health-check" --timeout "5" --check-interval "10" --unhealthy-threshold "3" --healthy-threshold "2" --port "80"

gcloud beta compute instance-groups managed create us-central1-group --base-instance-name=us-central1-group --template=template-v1 --size=5 --zones=us-central1-b,us-central1-c,us-central1-f --instance-redistribution-type=PROACTIVE --health-check=health-check --initial-delay=300

#Step 4 - Convert our us-central1-group into an autoscaling group:

gcloud beta compute instance-groups managed set-autoscaling "us-central1-group" --region "us-central1" --cool-down-period "60" --max-num-replicas "4" --min-num-replicas "2" --target-cpu-utilization "0.6"

#Step 4 - Create second instance group in the europe-north-1 region, and enable autoscaling:

gcloud beta compute instance-groups managed create europe-north1-group --base-instance-name=europe-north1-group --template=template-v1 --size=1 --zones=europe-north1-a,europe-north1-b,europe-north1-c --instance-redistribution-type=PROACTIVE --health-check=health-check --initial-delay=300

gcloud beta compute instance-groups managed set-autoscaling "europe-north1-group" --region "europe-north1" --cool-down-period "60" --max-num-replicas "4" --min-num-replicas "2" --target-cpu-utilization "0.6"

#Step 5 - Create an HTTP Load Balancer (SEPARATE SCRIPT AS "GCP GLOBAL HTTP LB"), summary steps:
  Set named ports for instance groups
  Create backend service and add backends
  Create load balancer URL map and frontend

#Step 5 - Create stress-test instance:

gcloud compute instances create stress-test --zone=us-east1-b --machine-type=n1-standard-1 --subnet=default --metadata=startup-script-url=[bucket_url_(.sh)] --boot-disk-device-name=stress-test
  
  #Log in to the instance via SSH, and enter the following commands to send a small amount of traffic to our application and then send a flood of traffic to overwhelm it:
  
    ab -n 1000000 -c 3 http://[your_frontend_ip]/
    ab -n 1000000 -c 1000 http://[your_frontend_ip]/
